{"version":3,"sources":["components/HOC/sectorfocuswrapper/SectorFocusWrapper.js","components/checksector/CheckSector.js","components/focusedsectors/FocusedSectors.js","tools/defaultState.js","App.js","reportWebVitals.js","index.js"],"names":["SectorFocusWrapper","focusedWrapperName","children","Grid","container","spacing","className","item","xs","CheckSector","value","FormControlLabel","control","Checkbox","color","label","labelPlacement","propTypes","focusName","PropTypes","string","sectors","array","handleAddSectors","func","FocusedSectors","FormControl","component","FormLabel","FormGroup","row","map","sector","sm","length","Button","variant","startIcon","onClick","e","defaultState","App","useState","state","setState","preventDefault","newSector","prompt","currentSectors","Box","width","mx","FocusedWrapperName","focusedSectors","Object","entries","forEach","push","renderFocusedSectors","newFocused","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.403dd0cd.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport \"./SectorFocusWrapper.css\";\r\n\r\nconst SectorFocusWrapper = ({ focusedWrapperName, children }) => {\r\n  return (\r\n    <Grid container spacing={1} className=\"sector-focus-wrapper\">\r\n      <Grid item xs={12}>\r\n        <h1>{focusedWrapperName}</h1>\r\n      </Grid>\r\n      {children}\r\n    </Grid>\r\n  );\r\n};\r\n\r\nSectorFocusWrapper.propTypes = {\r\n  focusedWrapperName: PropTypes.string,\r\n  children: PropTypes.node,\r\n};\r\n\r\nexport default SectorFocusWrapper;\r\n","import React from \"react\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport \"./CheckSector.css\";\r\n\r\nconst CheckSector = ({ value }) => {\r\n  return (\r\n    <FormControlLabel\r\n      value={value}\r\n      control={<Checkbox color=\"primary\" />}\r\n      label={value}\r\n      labelPlacement=\"end\"\r\n    />\r\n  );\r\n};\r\n\r\nCheckSector.propTypes = {\r\n  value: PropTypes.string,\r\n};\r\n\r\nexport default CheckSector;\r\n","import React from \"react\";\r\nimport CheckSector from \"../checksector/CheckSector\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormLabel from \"@material-ui/core/FormLabel\";\r\nimport FormGroup from \"@material-ui/core/FormGroup\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport \"./FocusedSectors.css\";\r\n\r\nconst FocusedSectors = ({ focusName, sectors, handleAddSectors }) => {\r\n  const renderSectors = () => {\r\n    return sectors.map(sector => (\r\n      <Grid item xs={12} sm={6} key={sector}>\r\n        <CheckSector value={sector} />\r\n      </Grid>\r\n    ));\r\n  };\r\n\r\n  return (\r\n    <FormControl component=\"fieldset\" className=\"focused-sectors\">\r\n      <FormLabel>{focusName}</FormLabel>\r\n      <FormGroup aria-label=\"position\" row>\r\n        <Grid container spacing={1}>\r\n          {renderSectors()}\r\n          {\r\n            // create empty space when numbers of sectors are even to align buttons right\r\n            sectors.length % 2 === 0 && <Grid item xs={12} sm={6}></Grid>\r\n          }\r\n          <Grid item xs={12} sm={6}>\r\n            <Button\r\n              variant=\"outlined\"\r\n              color=\"primary\"\r\n              startIcon={<AddIcon />}\r\n              onClick={e => handleAddSectors(e, focusName)}\r\n            >\r\n              Add sectors\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      </FormGroup>\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nCheckSector.propTypes = {\r\n  focusName: PropTypes.string,\r\n  sectors: PropTypes.array,\r\n  handleAddSectors: PropTypes.func,\r\n};\r\n\r\nexport default FocusedSectors;\r\n","const primaryFocus = {\r\n  \"Primary Focus\": [\"B2B\", \"Healthcare\", \"Saas\", \"Fintech\", \"Marketplaces\"],\r\n};\r\n\r\nconst secondaryFocus = {\r\n  \"Secondary Focus\": [\"B2B\", \"Healthcare\", \"Saas\", \"Fintech\"],\r\n};\r\n\r\n\r\nconst defaultState = { ...primaryFocus, ...secondaryFocus };\r\n\r\nexport default defaultState;\r\n","import React, { useState } from \"react\";\nimport SectorFocusWrapper from \"./components/HOC/sectorfocuswrapper/SectorFocusWrapper\";\nimport FocusedSectors from \"./components/focusedsectors/FocusedSectors\";\nimport Box from \"@material-ui/core/Box\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport defaultState from \"./tools/defaultState\";\n\nimport \"./App.css\";\n\nfunction App() {\n\n  //state stores focused category as key and sectors under it as value\n  const [state, setState] = useState(defaultState);\n\n  //render the focused categories\n  const renderFocusedSectors = () => {\n    const focusedSectors = [];\n    Object.entries(state).forEach(([focusName, sectors]) => {\n      focusedSectors.push(\n        <Grid item xs={12} key={focusName}>\n          <FocusedSectors\n            focusName={focusName}\n            sectors={sectors}\n            handleAddSectors={handleAddSectors}\n          />\n        </Grid>\n      );\n    });\n    return focusedSectors;\n  };\n\n  // add new focused category section\n  const handleAddFocus = e => {\n    e.preventDefault();\n    const newFocused = prompt(\"Please enter nw focused category name\");\n\n    // add a new section focused-category as a key and empty sector list as value\n    setState({...state, [newFocused]: []})\n  };\n\n  // add new sector\n  const handleAddSectors = (e, focusName) => {\n    e.preventDefault();\n    const newSector = prompt(\"Please enter sector name\");\n    const currentSectors = state[focusName];\n    setState({ ...state, [focusName]: [...currentSectors, newSector] });\n  };\n\n  return (\n    <Box width=\"50%\" mx=\"auto\" className=\"app\">\n      <SectorFocusWrapper FocusedWrapperName=\"Sector\">\n        {renderFocusedSectors()}\n        <Grid item xs={12} sm={8}>\n          <Button\n            variant=\"outlined\"\n            color=\"primary\"\n            startIcon={<AddIcon />}\n            onClick={handleAddFocus}\n          >\n            Add Another Focus\n          </Button>\n        </Grid>\n      </SectorFocusWrapper>\n    </Box>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}